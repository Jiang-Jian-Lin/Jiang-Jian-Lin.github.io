[{"categories":["leetcode"],"contents":"題目 Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1.\n解題思路 1. 描述過程（ Think out aloud） 當找到想要的目標，就顯示我的答案，如果數列沒有我的目標就顯示 -1\n使用二分法，因為已經排序過。可以讓時間複雜度在 O(log(n))\n通過左右邊界找到中點，如果為要找的數返回，否則移動邊界，找不到，返回 -1。\nvar search = function (nums, target) { let left = 0; // 初始左边界  let right = nums.length - 1; // 初始右边界  // 如果left \u0026gt; right 证明整个数组结束了仍没有找到目标值  while (left \u0026lt;= right) { let mid = left + Math.floor((right - left) / 2); //防止溢出  if (target === nums[mid]) { return mid; } else if (target \u0026gt; nums[mid]) { // 目标值大于中值，则中间左侧可以抛弃了  left = mid + 1; } else { // 目标值小于中值，则中间右侧可以抛弃了  right = mid - 1; } } return -1; }; 使用 Binary Search 的關鍵   排序後的數組 限定時間複雜度的搜尋法(題目限定 O(n)以下的解法） Others   補充   用二元搜尋,每次都要先 Sorted Array。因此追加資料時，必須插入恰當的位置，需要付出維護陣列的代價。 線性搜尋，陣列的數據雜亂無章也無所謂。   各種排序比較\nHuli\nCsdn\npython\n","permalink":"https://Jiang-Jian-Lin.github.io/blog/post-2/","tags":["Easy","JavaScript","Binary Search"],"title":"LeetCode 704 Binary Search"},{"categories":["leetcode"],"contents":"package main import ( \u0026#34;fmt\u0026#34; \u0026#34;math/rand\u0026#34; \u0026#34;time\u0026#34; ) type Moo struct { Cow int Sound string Tube chan bool } // A cow will moo until it is being fed func cow(num int, mootube chan Moo) { tube := make(chan bool) for { select { case mootube \u0026lt;- Moo{num, \u0026#34;moo\u0026#34;, tube}: fmt.Println(\u0026#34;Cow number\u0026#34;, num, \u0026#34;mooed through the mootube\u0026#34;) \u0026lt;-tube fmt.Println(\u0026#34;Cow number\u0026#34;, num, \u0026#34;is being fed and stops mooing\u0026#34;) mootube \u0026lt;- Moo{num, \u0026#34;mooh\u0026#34;, nil} fmt.Println(\u0026#34;Cow number\u0026#34;, num, \u0026#34;moos one last time out of happyness\u0026#34;) return default: fmt.Println(\u0026#34;Cow number\u0026#34;, num, \u0026#34;mooed through the mootube and was ignored\u0026#34;) time.Sleep(time.Duration(rand.Int31n(1000)) * time.Millisecond) } } } // The farmer wants to put food in all the mootubes to stop the mooing func farmer(numcows int, mootube chan Moo, farmertube chan string) { fmt.Println(\u0026#34;Farmer starts listening to the mootube\u0026#34;) for hungryCows := numcows; hungryCows \u0026gt; 0; { moo := \u0026lt;-mootube if moo.Sound == \u0026#34;mooh\u0026#34; { fmt.Println(\u0026#34;Farmer heard a moo of relief from cow number\u0026#34;, moo.Cow) hungryCows-- } else { fmt.Println(\u0026#34;Farmer heard a\u0026#34;, moo.Sound, \u0026#34;from cow number\u0026#34;, moo.Cow) time.Sleep(2e9) fmt.Println(\u0026#34;Farmer starts feeding cow number\u0026#34;, moo.Cow) moo.Tube \u0026lt;- true } } fmt.Println(\u0026#34;Farmer doesn\u0026#39;t hear a single moo anymore. All done!\u0026#34;) farmertube \u0026lt;- \u0026#34;yey!\u0026#34; } // The farm starts out with mooing cows that wants to be fed func runFarm(numcows int) { farmertube := make(chan string) mootube := make(chan Moo) for cownum := 0; cownum \u0026lt; numcows; cownum++ { go cow(cownum, mootube) } go farmer(numcows, mootube, farmertube) farmerSaid := \u0026lt;-farmertube if farmerSaid == \u0026#34;yey!\u0026#34; { fmt.Println(\u0026#34;All cows are happy.\u0026#34;) } } func main() { runFarm(4) fmt.Println(\u0026#34;done\u0026#34;) } ","permalink":"https://Jiang-Jian-Lin.github.io/blog/post-3/","tags":["Easy","JavaScript","Binary Search"],"title":"LeetCode 704 Binary Search"},{"categories":null,"contents":"正所謂的萬事起頭難！ Heading Heading 2 Heading 3 Heading 4 Heading 5 Heading 6 Emphasis Emphasis, aka italics, with asterisks or underscores.\nStrong emphasis, aka bold, with asterisks or underscores.\nCombined emphasis with asterisks and underscores.\nStrikethrough uses two tildes. Scratch this.\nLink I\u0026rsquo;m an inline-style link\nI\u0026rsquo;m an inline-style link with title\nI\u0026rsquo;m a reference-style link\nI\u0026rsquo;m a relative reference to a repository file\nYou can use numbers for reference-style link definitions\nOr leave it empty and use the link text itself.\nURLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or http://www.example.com and sometimes example.com (but not on Github, for example).\nSome text to show that the reference links can follow later.\nParagraph Lorem ipsum dolor sit amet consectetur adipisicing elit. Quam nihil enim maxime corporis cumque totam aliquid nam sint inventore optio modi neque laborum officiis necessitatibus, facilis placeat pariatur! Voluptatem, sed harum pariatur adipisci voluptates voluptatum cumque, porro sint minima similique magni perferendis fuga! Optio vel ipsum excepturi tempore reiciendis id quidem? Vel in, doloribus debitis nesciunt fugit sequi magnam accusantium modi neque quis, vitae velit, pariatur harum autem a! Velit impedit atque maiores animi possimus asperiores natus repellendus excepturi sint architecto eligendi non, omnis nihil. Facilis, doloremque illum. Fugit optio laborum minus debitis natus illo perspiciatis corporis voluptatum rerum laboriosam.\nList  List item List item List item List item List item  Unordered List  List item List item List item List item List item  Code and Syntax Highlighting Inline code has back-ticks around it.\nvar s = \u0026#34;JavaScript syntax highlighting\u0026#34;; alert(s); s = \u0026#34;Python syntax highlighting\u0026#34; print s No language indicated, so no syntax highlighting. But let's throw in a \u0026lt;b\u0026gt;tag\u0026lt;/b\u0026gt;. Blockquote  This is a blockquote example.\n Inline HTML You can also use raw HTML in your Markdown, and it\u0026rsquo;ll mostly work pretty well.\nTables Colons can be used to align columns.\n   Tables Are Cool     col 3 is right-aligned $1600   col 2 is centered $12   zebra stripes are neat $1    There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don\u0026rsquo;t need to make the raw Markdown line up prettily. You can also use inline Markdown.\n   Markdown Less Pretty     Still renders nicely   1 2 3    Image Youtube video   ","permalink":"https://Jiang-Jian-Lin.github.io/blog/post/","tags":["Other"],"title":"Markdown-紀錄常用語法"}]